the app to be on a single page (and this will eventually be converted to react native for mobile development). At the top of the page will be an "Enter Number" form, which will allow only numbers from 1 to 75, and have a submit button next to it that will post the number to backend, then clear the field.

Below that will be a list of the most recent three numbers called, which will be implemented via a call to the backend to get all numbers, then select only the three with the highest id (it auto increments). This can also be labelled as "recent numbers".

Below that I want to have a horizontal scrollbar type object, except it doesn't have left/right boundaries. Similar to a mobile phone's homepage, I want to be able to swipe between three "pages" (which will just be text fields in this element) or tap on one of the other two labels to move to that page. The active page will always remain in the middle, with the other elements scrolling around it as if it were on a big wheel. 

Below this will be the main body of the application. Depending on the selected option in the scroll wheel, It will either display the bingoCards component, the numbersCalled component, or the winConditions component. 

The numbersCalled component will display each called number individually, with each number having it's own delete button that sends a delete request to the backend with it's id. The numbers will also have ids, but I don't think these need to be visible. At the top of the numbersCalled component should be a deleteAll button, used for clearing the list of active numbers (also sends a call to the backend), which will happen when someone wins and a new game is started. A fresh GET call for the numbers called should happen after receiving a response from any other numbersCalled routes (post, deleteOne, deleteAll).

The winConditions component will similarly display a list of all win conditions, represented as a BingoCard Object (defined separately), with only a 5x5 grid of green/gray boxes depending on the winCondition parameters (it mimics a bingo card and highlights the squares needed for a win). Here, each individual win condition can also be active or inactive in the database. If it is active it is normal, and if it is inactive the entire box containing the winCondition should be greyed out with a darker grey than within the win condition 5x5 grid. Additionally, each win condition should have a toggle button to toggle it active or inactive (in the db) (it will then be fetched and rerendered soon), and a delete button to delete the win condition completely. At the top of the winCondition component will be an add button, which will display the dynamic card (functionality already implemented somewhere, might need modification). In the future, but not currently planned for implementation, is an additional non-deletable win condition for any vertical line, any horizontal line, or any diagonal line. This would also use different colours for the active squares, such as gold, and still be togglable for games where you need an x or the entire board. Each win condition also needs a hidden id field for the delete route

In the BingoCards component, every bingo card needs to be displayed (likely in a vertical scroll fashion with most/many cards appearing off-screen). The cards also have an activity status, and will appear normal or greyed out similar to the win conditions, with a toggle button to change this status. Each bingo card will have an incrementing id that is visible on the card itself as well, for locating purposes. The cards will likely be displayed in order from 1 to end, but in the future I might also add functionality for displaying the cards closest to winning first. Each bingo card also needs a delete button for deleting the card from the db. At the top of the bingoCards component should be three buttons, one for deleting all cards, one for adding a new card manually, and one for adding a new card using a camera to ai workflow that will be implemented in the next sprint. For now, this third button can be greyed out. The add manually button should open another card at the top of the list (visibly distinguished) with 25 number fields in a 5x5 pattern (aside from the free space in the middle). Once all 24 number fields have a value (the first column should restrict entry from 1 to 15, second from 16 to 30, and so on), a "submit" button should become clickable, allowing the user to submit the win condition. This component would also be nice to reuse in the ai-scanning workflow, where the numbers are just loaded by default into the grid before the user clicks submit so they can edit any misidentifications. 

Every component should update by calling their appropriate get method from the backend and rerendering the whole component whenever a post or delete method in their component is called.